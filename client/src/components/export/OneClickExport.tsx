import React from 'react';
import { Button } from '@/components/ui/button';
import { ExportFormat, ExportService, ExportTemplate } from '@/services/exportService';
import { Property } from '@/shared/schema';
import { FileDownIcon, FileCheck, Loader2 } from 'lucide-react';
import { useToast } from '@/hooks/use-toast';
import { useQuery } from '@tanstack/react-query';

interface OneClickExportProps {
  /**
   * Optional property ID to export just one property
   * If not provided, exports all properties in the current view/filter
   */
  propertyId?: number;
  
  /**
   * Optional button text
   */
  text?: string;
  
  /**
   * Optional icon to display on the button
   */
  icon?: React.ReactNode;
  
  /**
   * Button variant
   */
  variant?: 'default' | 'outline' | 'secondary' | 'ghost' | 'link' | 'destructive';
  
  /**
   * Optional CSS class for styling
   */
  className?: string;
}

/**
 * One-click export button component that immediately generates and downloads
 * a property report without showing a configuration dialog
 */
export const OneClickExport: React.FC<OneClickExportProps> = ({
  propertyId,
  text = 'Export Report',
  icon = <FileDownIcon className="mr-2 h-4 w-4" />,
  variant = 'default',
  className,
}) => {
  const { toast } = useToast();
  const [isExporting, setIsExporting] = React.useState(false);
  
  // Fetch all properties or a specific property
  const { data: properties = [] } = useQuery<Property[]>({
    queryKey: propertyId ? ['/api/properties', propertyId] : ['/api/properties'],
    staleTime: 1000 * 60 * 5, // 5 minutes
  });
  
  // Filter to just the requested property if propertyId is specified
  const propertiesToExport = React.useMemo(() => {
    if (propertyId) {
      return properties.filter(p => p.id === propertyId);
    }
    return properties;
  }, [properties, propertyId]);
  
  const handleExport = async () => {
    if (propertiesToExport.length === 0) {
      toast({
        title: 'No data to export',
        description: 'There are no properties available to export.',
        variant: 'destructive',
      });
      return;
    }
    
    setIsExporting(true);
    
    try {
      // For a single property, use the detailed residential template
      // For multiple properties, use a comparative analysis template
      const template = propertiesToExport.length === 1 
        ? ExportTemplate.RESIDENTIAL_DETAIL 
        : ExportTemplate.COMPARATIVE_ANALYSIS;
      
      // Generate a descriptive filename
      const fileName = propertiesToExport.length === 1
        ? `property-report-${propertiesToExport[0].parcelId}`
        : `property-comparison-report-${new Date().toISOString().split('T')[0]}`;
      
      // Export with appropriate options
      ExportService.exportWithTemplate(
        propertiesToExport,
        template,
        ExportFormat.PDF,
        {
          fileName,
          title: propertiesToExport.length === 1 
            ? `Property Report: ${propertiesToExport[0].address}`
            : `Property Comparison Report (${propertiesToExport.length} Properties)`,
          description: `Comprehensive insights generated by GIS_BS Property Valuation Platform`,
          dateGenerated: true,
          includeHeaders: true,
          pageSize: 'letter',
          orientation: 'portrait',
          includeImages: true,
        }
      );
      
      toast({
        title: 'Export successful',
        description: `Your property report has been generated successfully.`,
        action: <FileCheck className="h-5 w-5 text-green-500" />,
      });
    } catch (error) {
      console.error('Export error:', error);
      toast({
        title: 'Export failed',
        description: 'There was an error generating your report. Please try again.',
        variant: 'destructive',
      });
    } finally {
      setIsExporting(false);
    }
  };
  
  return (
    <Button 
      variant={variant} 
      className={className}
      onClick={handleExport}
      disabled={isExporting || propertiesToExport.length === 0}
    >
      {isExporting ? (
        <Loader2 className="mr-2 h-4 w-4 animate-spin" />
      ) : (
        icon
      )}
      {text}
    </Button>
  );
};

export default OneClickExport;